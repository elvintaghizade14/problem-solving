Walking Through a Problem:
Interviews are supposed to be difficult. If you don't get every-or any-answer immediately.

1. Listen Carefully
    - make sure you hear the problem correctly
    - be sure that you've mentally recorded any unique information in the problem

2. Draw an Example
    - specific
    - sufficiently large
    - Not a special case

3. State a Brute Force
    - explain what the space and time complexity is, and then dive into improvements

4. Optimize
    - look for any unused information
    - use a fresh example
    - solve it "incorrectly"
    - make time vs. space tradeoff
    - precompute information
    - use a hash table
    - think about the best conceivable runtime

5. Walk Through
    - solidify your understanding of the algorithm
    - know what the variables are and when they change

6. Implement
    - write beautiful code. Beautiful code means:
        * modularized code
        * error checks
        * use other classes/structs where appropriate
        * good variable names

7. Test
    - start with a "conceptual" test
    - weird looking code
    - hot spots
    - small test cases
    - special cases